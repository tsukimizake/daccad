
-- generated by elm_rs


module Bindings exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type alias Stl =
    { bytes : List (Int)
    }


stlEncoder : Stl -> Json.Encode.Value
stlEncoder struct =
    Json.Encode.object
        [ ( "bytes", (Json.Encode.list (Json.Encode.int)) struct.bytes )
        ]


stlDecoder : Json.Decode.Decoder Stl
stlDecoder =
    Json.Decode.succeed Stl
        |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "bytes" (Json.Decode.list (Json.Decode.int))))


